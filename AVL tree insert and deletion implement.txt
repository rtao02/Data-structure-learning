
#include <iostream> //to use cout
#include <algorithm> //to use max function such as  i = max(a, b);
#include<stack>

using namespace std;

//You need to use the following node class for each node of the AVL tree
class node {
public:
	int value;
	int height;//this is tree height. Leaf node is 1; empty node (i.e., NIL) is 0
	node* parent;
	node* l_child;
	node* r_child;
	node() {}
	node(int i) { value = i; height = 1; parent = l_child = r_child = nullptr; }

};

class avl_tree {
public:
	node* root;
	avl_tree() {
		root = nullptr;
	}

	//************************************************************************************
	//Implement the following member functions
	void add_node(int i);
	//if case of a tie, add i to the last of existing nodes with value i in the in-order sequence

	void delete_node(int i);
	//Delete the node with value i.  in case of multiple nodes with value i, delete the first node with value i in the in-order traveral sequence


	void in_order_traversal(node* p); //such as 2 5 9 11 11 14 15 15 ...

	pair<node*, int> height_update(node* p);
	/*
	This function will be invoked by add_node and delete_node.
	p points to the first node that we need to check for possible height update.  We then need to check possible height update toward root.
	All nodes whose heights need to be updated will be performed in this function.
	The function returns a pair.  If no imbalance is detected, the first of the pair will be nullptr; otherwise it will be the address of the action node.
	The second of the pair will be 0 if no imbalance is detected; otherwise its value is 1,2,3,4 for RR RL, LL, and LR pattern, respectively.
	*/

	void L_Rotate(node* p);
	//p points to the node at which the rotation will be performed.

	void R_Rotate(node* p);
	//p points to the node at which the rotation will be performed.
};

void avl_tree::in_order_traversal(node* p) {//p should be root
	if (p == nullptr) return;
	in_order_traversal(p->l_child);
	cout << "(" << p->value << ", " << p->height << ") ";
	in_order_traversal(p->r_child);

}

void avl_tree::delete_node(int i){
	//search the position of this node, DFS ***
	node* cur = root;
	node* curdelete = nullptr;
	//use dfs find the node which is need deleted
	/*stack<node*> s;
	while (cur || !s.empty()) {
		while (cur) {
			s.push(cur);
			cur = cur->l_child;
		}
		cur = s.top();
		if (cur->value == i) break;
		s.pop();
		cur = cur->r_child;
	}*/
	//use morris inorder traversal
	while (cur) {
		//left is null then check the node and go to right
		if (cur->l_child == nullptr) {
			if (cur->value == i && curdelete == nullptr) curdelete = cur;//here we found delete node
			cur = cur->r_child;
		}
		else {
			//find the predecessor
			node* pre = cur->l_child;
			//for finding the predecessor we need to go left first and go right till the end or current node
			while (pre->r_child != cur && pre->r_child != nullptr) {
				pre = pre->r_child;
			}//after this step we found the predecessor
			//if predecessor's right child is nullptr means we didn't check this one for now, and then link it with current node
			if (pre->r_child == nullptr) {
				pre->r_child = cur;
				cur = cur->l_child;
			}
			else {//left is already visit, Go right after visiting current
				pre->r_child = nullptr;
				if (cur->value == i && curdelete == nullptr) curdelete = cur;//here we found delete node
				cur = cur->r_child;
			}
		}
	}

	if (curdelete == nullptr) {//means no node with value i in this tree end delete process
		return;
	}
	node* temp = curdelete->parent;
	//we could make sure the cur node is the deleted required node if we run to this line
	int station = 0;
	if (curdelete->l_child == nullptr && curdelete->r_child == nullptr) station = 1;
	else if (curdelete->l_child != nullptr && curdelete->r_child != nullptr) {
		if (curdelete->l_child->l_child == nullptr && curdelete->l_child->r_child == nullptr && curdelete->r_child->l_child == nullptr && curdelete->r_child->r_child == nullptr) station = 2;
		else station = 3;
	}
	else if (curdelete->l_child != nullptr && curdelete->r_child == nullptr) {
		if (curdelete->l_child->l_child == nullptr && curdelete->l_child->r_child == nullptr) station = 2;
		else station = 3;
	}
	else if (curdelete->l_child == nullptr && curdelete->r_child != nullptr) {
		if (curdelete->r_child->l_child == nullptr && curdelete->r_child->r_child == nullptr) station = 2;
		else station = 3;
	}
	//leaf node 1 ; node with only leaf 2 ; other case 3 
	cout << "violation type: " << station << endl;//show the curdeleterent violation type
	switch (station) {
		case 1: {//the deleted node is a leaf node
			int LorR = 0; //1 means left, 2 means right
			if (temp != nullptr) {
				if (temp->l_child == curdelete) LorR = 1;
				else LorR = 2;
			}
			delete curdelete;
			if (LorR != 0) {
				if (LorR == 1) temp->l_child = nullptr;
				else temp->r_child = nullptr;
			}
			height_update(temp);
			while (temp != nullptr) {
				//delete curdelete;
				//update height and fix violation
				node* actionN = height_update(temp).first;
				int vioType = height_update(temp).second;
				cout << vioType << endl;
				if (vioType == 0) temp = temp->parent;
				else if (vioType == 1) {//RR pattern
					L_Rotate(actionN);
					temp = temp->parent;
				}
				else if (vioType == 2) {//RL pattern
					R_Rotate(actionN->r_child);
					L_Rotate(actionN);
					temp = temp->parent;
				}
				else if (vioType == 3) {//LL pattern
					R_Rotate(actionN);
					temp = temp->parent;
				}
				else if (vioType == 4) {//LR pattern
					L_Rotate(actionN->l_child);
					R_Rotate(actionN);
					temp = temp->parent;
				}
			}
			break;
		}
		case 2: {//the deleted node have only leaf node
			if (curdelete->l_child != nullptr && curdelete->r_child != nullptr) {//have both left and right node
				curdelete->value = curdelete->l_child->value;
				//curdelete->height = 2;
				curdelete = curdelete->l_child;
				temp = curdelete->parent;
				int LorR = 0; //1 means left, 2 means right
				if (temp != nullptr) {
					if (temp->l_child == curdelete) LorR = 1;
					else LorR = 2;
				}
				delete curdelete;
				if (LorR != 0) {
					if (LorR == 1) temp->l_child = nullptr;
					else temp->r_child = nullptr;
				}
				while (temp != nullptr) {
					//delete curdelete;
					//update height and fix violation
					node* actionN = height_update(temp).first;
					int vioType = height_update(temp).second;
					cout << vioType << endl;
					if (vioType == 0) temp = temp->parent;
					if (vioType == 1) {//RR pattern
						L_Rotate(actionN);
						temp = temp->parent;
					}
					if (vioType == 2) {//RL pattern
						R_Rotate(actionN->r_child);
						L_Rotate(actionN);
						temp = temp->parent;
					}
					if (vioType == 3) {//LL pattern
						R_Rotate(actionN);
						temp = temp->parent;
					}
					if (vioType == 4) {//LR pattern
						L_Rotate(actionN->l_child);
						R_Rotate(actionN);
						temp = temp->parent;
					}
				}
			}
			if ((curdelete->l_child != nullptr && curdelete->r_child == nullptr) || (curdelete->l_child == nullptr && curdelete->r_child != nullptr)) {
				if (curdelete->l_child != nullptr) {
					curdelete->value = curdelete->l_child->value;
					//curdelete->height = 1;
					curdelete = curdelete->l_child;
				}
				else if (curdelete->r_child != nullptr) {
					curdelete->value = curdelete->r_child->value;
					//curdelete->height = 1;
					curdelete = curdelete->r_child;
				}
				temp = curdelete->parent;
				int LorR = 0; //1 means left, 2 means right
				if (temp != nullptr) {
					if (temp->l_child == curdelete) LorR = 1;
					else LorR = 2;
				}
				delete curdelete;
				if (LorR != 0) {
					if (LorR == 1) temp->l_child = nullptr;
					else temp->r_child = nullptr;
				}
				while (temp != nullptr) {
					//delete curdelete;
					//update height and fix violation
					node* actionN = height_update(temp).first;
					int vioType = height_update(temp).second;
					cout << vioType << endl;
					if (vioType == 0) temp = temp->parent;
					if (vioType == 1) {//RR pattern
						L_Rotate(actionN);
						temp = temp->parent;
					}
					if (vioType == 2) {//RL pattern
						R_Rotate(actionN->r_child);
						L_Rotate(actionN);
						temp = temp->parent;
					}
					if (vioType == 3) {//LL pattern
						R_Rotate(actionN);
						temp = temp->parent;
					}
					if (vioType == 4) {//LR pattern
						L_Rotate(actionN->l_child);
						R_Rotate(actionN);
						temp = temp->parent;
					}
				}
			}
			break;
		}
		case 3: {
			//detemine whether should we check predecessor or successor
			int replaceN = 0;// 1: means use predecessor; 2: means use successor
			if (curdelete->l_child->height >= curdelete->r_child->height) replaceN = 1;//means we need find predecessor
			else replaceN = 2;//means we need find successor
			//find the successor or predecessor and replace
			if (replaceN == 1) {//find predecessor
				node* fpredecessor = curdelete->l_child;
				node* predecessor = curdelete->l_child;
				while (fpredecessor) {
					predecessor = fpredecessor;
					fpredecessor = fpredecessor->r_child;
				}
				//for now we find predecessor -> replace it with delete required node -> delete curdelete
				curdelete->value = predecessor->value;
				curdelete = predecessor;
				temp = curdelete->parent;
				int LorR = 0; //1 means left, 2 means right
				if (temp != nullptr) {
					if (temp->l_child == curdelete) LorR = 1;
					else LorR = 2;
				}
				delete curdelete;
			
				if (LorR != 0) {
					if (LorR == 1) temp->l_child = nullptr;
					else temp->r_child = nullptr;
				}
				height_update(temp);
				while (temp != nullptr) {
					//delete curdelete;
					//update height and fix violation
					node* actionN = height_update(temp).first;
					int vioType = height_update(temp).second;
					cout << vioType << endl;
					if (vioType == 0) temp = temp->parent;
					if (vioType == 1) {//RR pattern
						L_Rotate(actionN);
						temp = temp->parent;
					}
					if (vioType == 2) {//RL pattern
						R_Rotate(actionN->r_child);
						L_Rotate(actionN);
						temp = temp->parent;
					}
					if (vioType == 3) {//LL pattern
						R_Rotate(actionN);
						temp = temp->parent;
					}
					if (vioType == 4) {//LR pattern
						L_Rotate(actionN->l_child);
						R_Rotate(actionN);
						temp = temp->parent;
					}
				}
			}
			if (replaceN == 2) {//find successor
				node* fsuccessor = curdelete->r_child;
				node* successor = curdelete->r_child;
				while (fsuccessor) {
					successor = fsuccessor;
					fsuccessor = fsuccessor->l_child;
				}
				//for now we find successor -> replace it with delete required node -> delete curdelete
				curdelete->value = successor->value;
				curdelete = successor;
				temp = curdelete->parent;
			
				int LorR = 0; //1 means left, 2 means right
				if (temp != nullptr) {
					if (temp->l_child == curdelete) LorR = 1;
					else LorR = 2;
				}
				delete curdelete;
				//height_update(temp);
				if (LorR != 0) {
					if (LorR == 1) temp->l_child = nullptr;
					else temp->r_child = nullptr;
				}
				height_update(temp);
				while (temp != nullptr) {
					//delete curdelete;
					//update height and fix violation
					node* actionN = height_update(temp).first;
					int vioType = height_update(temp).second;
					cout << vioType << endl;
					if (vioType == 0) temp = temp->parent;
					else if (vioType == 1) {//RR pattern
						L_Rotate(actionN);
						temp = temp->parent;
					}
					else if (vioType == 2) {//RL pattern
						R_Rotate(actionN->r_child);
						L_Rotate(actionN);
						temp = temp->parent;
					}
					else if (vioType == 3) {//LL pattern
						R_Rotate(actionN);
						temp = temp->parent;
					}
					else if (vioType == 4) {//LR pattern
						L_Rotate(actionN->l_child);
						R_Rotate(actionN);
						temp = temp->parent;
					}
				}
			}
			break;
		}
	}
}
void avl_tree::add_node(int i) {
	node* p1 = new node(i);
	//insert first node, NO need update height
	if (root == nullptr) {
		root = p1;
		return;
	}
	//insert non-first node: choose right position -> reslove violation
	node* pos = root;
	node* poschild = root;
	int label;//label == 1 means left child; label == 2 means right child
	while (poschild != nullptr) {//find the position for attaching new node
		if (i < poschild->value) {
			pos = poschild;
			poschild = poschild->l_child;
			label = 1;
		}
		else {//i >= poschild->value
			pos = poschild;
			poschild = poschild->r_child;
			label = 2;
		}
	}
	//for check dose the pos whether right or not
	if (label == 1 && pos->l_child == nullptr) cout << "T" << endl;
	else if (label == 2 && pos->r_child == nullptr) cout << "T" << endl;
	else cout << "F" << endl;
	//attch new node
	if (label == 1) {
		pos->l_child = p1;
		p1->parent = pos;
	}
	else if (label == 2) {
		pos->r_child = p1;
		p1->parent = pos;
	}
	//update height and fix violation
	node* actionN = height_update(pos).first;
	int vioType = height_update(pos).second;
	cout << vioType << endl;
	if (vioType == 0) return;
	else if (vioType == 1) {//RR pattern
		L_Rotate(actionN);
		return;
	}
	else if (vioType == 2) {//RL pattern
		R_Rotate(actionN->r_child);
		L_Rotate(actionN);
		return;
	}
	else if (vioType == 3) {//LL pattern
		R_Rotate(actionN);
		return;
	}
	else if (vioType == 4) {//LR pattern
		L_Rotate(actionN->l_child);
		R_Rotate(actionN);
		return;
	}
}
																											
pair<node*, int> avl_tree::height_update(node* p) {//p is the current pointer of pos or the parent of deleted node
	node* activeN;
	node* temp = p;
	int pvio = 0;
	int vioType = 0;
	while (pvio == 0 && temp != nullptr) {
		//update current p's height 
		if (temp->l_child != nullptr && temp->r_child == nullptr) temp->height = temp->l_child->height + 1; //newly inserted node is left and his parent's have no right node
		else if (temp->l_child == nullptr && temp->r_child != nullptr) temp->height = temp->r_child->height + 1; //newly inserted node is right and his parent's have no left node
		else if (temp->l_child != nullptr && temp->r_child != nullptr) temp->height = max(temp->l_child->height, temp->r_child->height) + 1;//both left and right of pos is nonempty
		else if (temp->l_child == nullptr && temp->r_child == nullptr) temp->height = 1;
		//check posible violation
		if (temp->l_child != nullptr && temp->r_child == nullptr) {
			if (temp->l_child->height > 1) {//now we have violation
				if (temp->l_child->l_child != nullptr) {//means this is LL pattern
					pvio = 1;
					vioType = 3;
					activeN = temp;
					break;
				}
				else if (temp->l_child->r_child != nullptr) {//means this is LR pattern
					pvio = 1;
					vioType = 4;
					activeN = temp;
					break;
				}
			}
		}
		if (temp->l_child == nullptr && temp->r_child != nullptr) {
			if (temp->r_child->height > 1) {//now we have violation
				if (temp->r_child->r_child != nullptr) {//means this is RR pattern
					pvio = 1;
					vioType = 1;
					activeN = temp;
					break;
				}
				else if (temp->r_child->l_child != nullptr) {//means this is RL pattern
					pvio = 1;
					vioType = 2;
					activeN = temp;
					break;
				}
			}
		}
		if (temp->l_child != nullptr && temp->r_child != nullptr) {
			if (temp->l_child->height > temp->r_child->height && temp->l_child->height - temp->r_child->height > 1) {//now we have violation
				if (temp->l_child->l_child != nullptr) {//means this is LL pattern
					pvio = 1;
					vioType = 3;
					activeN = temp;
					break;
				}
				else if (temp->l_child->r_child != nullptr) {//means this LR pattern
					pvio = 1;
					vioType = 4;
					activeN = temp;
					break;
				}
			}
			if (temp->l_child->height < temp->r_child->height && temp->r_child->height - temp->l_child->height > 1) {//now we have violation
				if (temp->r_child->r_child != nullptr) {//means this is RR pattern
					pvio = 1;
					vioType = 1;
					activeN = temp;
					break;
				}
				else if (temp->r_child->l_child != nullptr) {//means this is RL pattern
					pvio = 1;
					vioType = 2;
					activeN = temp;
					break;
				}
			}
		}
		temp = temp->parent;
	}
	if (pvio == 0) return { nullptr, vioType };
	if (pvio == 1) return { activeN, vioType };
}

void avl_tree::L_Rotate(node* p) {//assume p is active node
	if (p->r_child->l_child == nullptr && p == root) {
		root = p->r_child;
		p->r_child->parent = nullptr;
		p->r_child->l_child = p;
		p->parent = p->r_child;
		p->r_child = nullptr;
	}
	else if (p->r_child->l_child != nullptr && p == root) {
		node* temp = p->r_child->l_child;
		root = p->r_child;
		p->r_child->parent = nullptr;
		p->r_child->l_child = p;
		p->parent = p->r_child;
		p->r_child = temp;
		temp->parent = p;
	}
	else if (p->r_child->l_child == nullptr && p != root) {
		p->r_child->parent = p->parent;
		if (p->value > p->parent->value) {//means p is the right child of his parent
			p->parent->r_child = p->r_child;
		}
		if (p->value < p->parent->value) {//means p is the left child of his parent
			p->parent->l_child = p->r_child;
		}
		if (p->value == p->parent->value) {
			if (p == p->parent->l_child) {//means p is left child of his parent
				p->parent->l_child = p->r_child;
			}
			else if (p == p->parent->r_child) {//means p is the right child of his parent
				p->parent->r_child = p->r_child;
			}
		}
		p->parent = p->r_child;
		p->r_child->l_child = p;
		p->r_child = nullptr;
	}
	else if (p->r_child->l_child != nullptr && p != root) {
		node* temp = p->r_child->l_child;
		p->r_child->parent = p->parent;
		if (p->value > p->parent->value) {//means p is the right child of his parent
			p->parent->r_child = p->r_child;
		}
		if (p->value < p->parent->value) {//means p is the left child of his parent
			p->parent->l_child = p->r_child;
		}
		if (p->value == p->parent->value) {
			if (p == p->parent->l_child) {//means p is left child of his parent
				p->parent->l_child = p->r_child;
			}
			else if (p == p->parent->r_child) {//means p is the right child of his parent
				p->parent->r_child = p->r_child;
			}
		}
		p->r_child->l_child = p;
		p->parent = p->r_child;
		p->r_child = temp;
		temp->parent = p;
	}
	//after rotate we need update p's height due to we changed it position
	if (p->l_child == nullptr && p->r_child == nullptr) {
		p->height = 1;
	}
	else if (p->l_child == nullptr && p->r_child != nullptr) {
		p->height = p->r_child->height + 1;
	}
	else if (p->l_child != nullptr && p->r_child == nullptr) {
		p->height = p->l_child->height + 1;
	}
	else if (p->l_child != nullptr && p->r_child != nullptr) {
		p->height = max(p->l_child->height, p->r_child->height) + 1;
	}
	//then update current parent of p's height
	node* p2 = p->parent;
	if (p2->l_child == nullptr && p2->r_child == nullptr) {
		p2->height = 1;
	}
	else if (p2->l_child == nullptr && p2->r_child != nullptr) {
		p2->height = p2->r_child->height + 1;
	}
	else if (p2->l_child != nullptr && p2->r_child == nullptr) {
		p2->height = p2->l_child->height + 1;
	}
	else if (p2->l_child != nullptr && p2->r_child != nullptr) {
		p2->height = max(p2->l_child->height, p2->r_child->height) + 1;
	}
}
void avl_tree::R_Rotate(node* p) {//assume p is active node
	if (p->l_child->r_child == nullptr && p == root) {
		root = p->l_child;
		p->l_child->parent = nullptr;
		p->l_child->r_child = p;
		p->parent = p->l_child;
		p->l_child = nullptr;
	}
	else if (p->l_child->r_child != nullptr && p == root) {
		node* temp = p->l_child->r_child;
		root = p->l_child;
		p->l_child->parent = nullptr;
		p->l_child->r_child = p;
		p->parent = p->l_child;
		p->l_child = temp;
		temp->parent = p;
	}
	else if (p->l_child->r_child == nullptr && p != root) {
		p->l_child->parent = p->parent;
		if (p->value < p->parent->value) {//means p is the left child of his parent
			p->parent->l_child = p->l_child;
		}
		if (p->value > p->parent->value) {//means p is the right child of his parent
			p->parent->r_child = p->l_child;
		}
		if (p->value == p->parent->value) {
			if (p == p->parent->l_child) {//means p is left child of his parent
				p->parent->l_child = p->l_child;
			}
			else if (p == p->parent->r_child) {//means p is the right child of his parent
				p->parent->r_child = p->l_child;
			}
		}
		p->parent = p->l_child;
		p->l_child->r_child = p;
		p->l_child = nullptr;
	}
	else if (p->l_child->r_child != nullptr && p != root) {
		node* temp = p->l_child->r_child;
		p->l_child->parent = p->parent;
		if (p->value < p->parent->value) {//means p is the left child of his parent
			p->parent->l_child = p->l_child;
		}
		if (p->value > p->parent->value) {//means p is the right child of his parent
			p->parent->r_child = p->l_child;
		}
		if (p->value == p->parent->value) {
			if (p == p->parent->l_child) {//means p is left child of his parent
				p->parent->l_child = p->l_child;
			}
			else if (p == p->parent->r_child) {//means p is the right child of his parent
				p->parent->r_child = p->l_child;
			}
		}
		p->parent = p->l_child;
		p->l_child->r_child = p;
		p->l_child = temp;
		temp->parent = p;
	}
	//after rotate we need update p's height due to we changed it position
	if (p->l_child == nullptr && p->r_child == nullptr) {
		p->height = 1;
	}
	else if (p->l_child == nullptr && p->r_child != nullptr) {
		p->height = p->r_child->height + 1;
	}
	else if (p->l_child != nullptr && p->r_child == nullptr) {
		p->height = p->l_child->height + 1;
	}
	else if (p->l_child != nullptr && p->r_child != nullptr) {
		p->height = max(p->l_child->height, p->r_child->height) + 1;
	}
	//then update current parent of p's height
	node* p2 = p->parent;
	if (p2->l_child == nullptr && p2->r_child == nullptr) {
		p2->height = 1;
	}
	else if (p2->l_child == nullptr && p2->r_child != nullptr) {
		p2->height = p2->r_child->height + 1;
	}
	else if (p2->l_child != nullptr && p2->r_child == nullptr) {
		p2->height = p2->l_child->height + 1;
	}
	else if (p2->l_child != nullptr && p2->r_child != nullptr) {
		p2->height = max(p2->l_child->height, p2->r_child->height) + 1;
	}
}


int main() {
	//Different test cases will be used during grading.
	avl_tree t1;
	t1.add_node(5);
	t1.in_order_traversal(t1.root);
	t1.add_node(5);
	t1.in_order_traversal(t1.root);
	t1.add_node(5);
	t1.in_order_traversal(t1.root);
	t1.add_node(5);
	t1.in_order_traversal(t1.root);
	t1.add_node(5);
	t1.in_order_traversal(t1.root);
	t1.add_node(5);
	t1.in_order_traversal(t1.root);
	t1.add_node(5);
	t1.in_order_traversal(t1.root);
	t1.add_node(5);
	t1.in_order_traversal(t1.root);
	t1.add_node(5);
	t1.in_order_traversal(t1.root);
	t1.add_node(5);
	t1.in_order_traversal(t1.root);
	t1.add_node(4);
	t1.in_order_traversal(t1.root);
	t1.add_node(4);
	t1.in_order_traversal(t1.root);
	cout << endl;
	t1.in_order_traversal(t1.root);
	cout << "\n";

	t1.delete_node(5);
	cout << "\n";
	t1.in_order_traversal(t1.root);
	/*avl_tree t1;
	t1.add_node(30);
	t1.add_node(25);
	t1.add_node(40);
	t1.add_node(15);
	t1.add_node(26);
	t1.add_node(32);
	t1.add_node(50);
	t1.add_node(10);
	t1.add_node(20);
	t1.add_node(28);
	t1.add_node(31);
	t1.add_node(35);
	t1.add_node(45);
	t1.add_node(60);
	t1.add_node(5);
	t1.add_node(38);
	t1.add_node(42);
	t1.add_node(55);
	t1.add_node(70);
	t1.add_node(80);
	t1.in_order_traversal(t1.root);
	t1.delete_node(30);
	t1.in_order_traversal(t1.root);*/
	/*avl_tree t1;
	t1.add_node(45);
	t1.in_order_traversal(t1.root);
	t1.add_node(12);
	t1.in_order_traversal(t1.root);
	t1.add_node(50);
	t1.in_order_traversal(t1.root);
	t1.add_node(46);
	t1.in_order_traversal(t1.root);
	t1.add_node(30);
	t1.in_order_traversal(t1.root);
	t1.add_node(34);
	t1.in_order_traversal(t1.root);
	t1.add_node(32);
	t1.in_order_traversal(t1.root);
	t1.add_node(32);
	t1.in_order_traversal(t1.root);
	t1.add_node(50);
	t1.in_order_traversal(t1.root);
	t1.add_node(35);
	t1.in_order_traversal(t1.root);
	t1.add_node(58);
	t1.in_order_traversal(t1.root);
	t1.add_node(52);
	t1.in_order_traversal(t1.root);
	t1.add_node(11);
	t1.in_order_traversal(t1.root);
	t1.add_node(10);
	t1.in_order_traversal(t1.root);
	t1.delete_node(45);
	t1.in_order_traversal(t1.root);
	t1.delete_node(32);
	t1.in_order_traversal(t1.root);
	t1.delete_node(32);
	t1.in_order_traversal(t1.root);
	t1.add_node(50);
	t1.in_order_traversal(t1.root);
	t1.add_node(46);
	t1.in_order_traversal(t1.root);
	t1.add_node(30);
	t1.in_order_traversal(t1.root);
	t1.add_node(34);
	t1.in_order_traversal(t1.root);
	t1.delete_node(48);
	cout << endl;
	t1.in_order_traversal(t1.root);*/
	getchar();
	getchar();
	return 0;
}

//The following is an example showing how to return a pair.
/*
#include <iostream>
using namespace std;

pair<int *, int> f1(){
	return { new int {10}, 10 };
}
int main() {
	cout << *f1().first << " " << f1().second << endl;
	getchar();
	getchar();
	return 0;
}
*/
